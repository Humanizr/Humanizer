trigger:
- master
- rel/*

pr:
- master
- rel/*

pool:
  vmImage: windows-2019

variables: 
  BuildConfiguration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK 3.x'
  inputs:
    version: 3.x
    includePreviewVersions: true

- task: UseDotNet@2
  displayName: 'Use .NET Core Runtime 2.1.x'
  inputs:
    version: 2.1.x
    packageType: runtime
    

- task: DotNetCoreCLI@2  
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . nbgv
  displayName: Install NBGV tool

- script: nbgv cloud
  displayName: Set Version

- task: DotNetCoreCLI@2  
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . dotnet-format
  displayName: Install dotnet format tool (https://github.com/dotnet/format)

- script: dotnet format --dry-run --check -w .\src\Humanizer.sln
  displayName: Check code format

- task: DotNetCoreCLI@2
  inputs:
    command: build
    projects: .\src\Humanizer.sln
    arguments: -c $(BuildConfiguration)
  displayName: Build  
  
- powershell: |
    mkdir $(Build.ArtifactStagingDirectory)\Packages
    $version = .\nbgv get-version -f json | ConvertFrom-Json
    $nuspecs = gci .\NuSpecs\*.nuspec 
    foreach ($item in $nuspecs) {
      dotnet pack .\src\Humanizer\Humanizer.csproj --no-build -o $(Build.ArtifactStagingDirectory)\Packages /p:NuspecFile=$($item.FullName) /p:NuspecBasePath=..\ /p:NuspecProperties="version=$($version.NuGetPackageVersion);RepositoryType=git;RepositoryCommit=$($version.GitCommitId);RepositoryUrl=https://github.com/Humanizr/Humanizer" 
    }
  displayName: Create packages
  
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: .\src\Humanizer.Tests\Humanizer.Tests.csproj
    arguments: -c $(BuildConfiguration) --collect:"XPlat code coverage" -s $(System.DefaultWorkingDirectory)/src/CodeCoverage.runsettings -- RunConfiguration.DisableAppDomain=true
  displayName: Run Tests

- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . dotnet-reportgenerator-globaltool
  displayName: Install ReportGenerator tool

- script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/Rx.NET/Source/coverlet/reports -reporttypes:"Cobertura"
  displayName: Create reports

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/Rx.NET/Source/coverlet/reports/Cobertura.xml
  
- task: PowerShell@2
  displayName: Authenticode Sign artifacts
  inputs:
    filePath: scripts/Sign-Package.ps1
  env:
    SignClientUser: $(SignClientUser)
    SignClientSecret: $(SignClientSecret)
    ArtifactDirectory: $(Build.ArtifactStagingDirectory)\Packages
  condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))

- task: PublishBuildArtifacts@1
  displayName: Publish Package Artifacts
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)\Packages
    artifactType: container
    artifactName: Packages
