trigger:
- main
- rel/*

pr:
- main
- rel/*

variables:
  BuildConfiguration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

stages:
- stage: Build
  variables:
  - group: 'Report Generator License Key'

  jobs:
  - job: Build
    pool:
      vmImage: windows-latest

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 8 SDK'
      inputs:
        version: 8.x

    - task: UseDotNet@2
      displayName: 'Use .NET 10 SDK'
      inputs:
        includePreviewVersions: true
        version: 10.x

    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . nbgv
      displayName: Install NBGV tool

    - script: nbgv cloud
      displayName: Set Version

    - task: DotNetCoreCLI@2
      inputs:
        command: build
        projects: .\src\Humanizer\Humanizer.csproj
        arguments: -c $(BuildConfiguration) /t:PackNuSpecs /p:PackageOutputPath=$(Build.ArtifactStagingDirectory)\Packages 
      displayName: Restore, Build, and Pack

    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: .\src\Humanizer.Tests\Humanizer.Tests.csproj
        arguments: -c $(BuildConfiguration) --collect:"XPlat code coverage" -s $(System.DefaultWorkingDirectory)/src/CodeCoverage.runsettings -- RunConfiguration.DisableAppDomain=true
      displayName: Run Tests

    # Generate code coverage report
    # https://danielpalme.github.io/ReportGenerator/
    - task: reportgenerator@5
      displayName: Generate Code Coverage Report
      inputs:
        reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        targetdir: $(Build.ArtifactStagingDirectory)/coverageReports/ 
        reporttypes: HtmlInline_AzurePipelines;Cobertura;Badges
        license: '$(ReportGeneratorLicenseKey)'
        publishCodeCoverageResults: true
      
    - publish: $(Build.ArtifactStagingDirectory)\Packages
      displayName: Publish build packages
      artifact: BuildPackages
  

- stage: CodeSign
  dependsOn: Build
  condition: and(succeeded('Build'), not(eq(variables['build.reason'], 'PullRequest')))
  jobs:
  - job: CodeSign
    displayName: Code Signing
    pool:
      vmImage: windows-latest
    variables:
    - group: SignCLI Creds

    steps:

    # Retreive unsigned artifacts 
    - download: current
      artifact: BuildPackages
      displayName: Download build artifacts

    - task: UseDotNet@2
      displayName: 'Use .NET 10 SDK'
      inputs:
        includePreviewVersions: true
        version: 10.x

    # Install the code signing tool
    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . --prerelease sign 
      displayName: Install SignTool tool

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'AzureRM - Humanizr'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          .\sign code azure-key-vault `
          "**/*.nupkg" `
          --base-directory "$(Pipeline.Workspace)\BuildPackages" `
          --publisher-name "Humanizer" `
          --description "Humanizer" `
          --description-url "https://github.com/Humanizr/Humanizer" `
          --azure-key-vault-certificate "$(SignKeyVaultCertificate)" `
          --azure-key-vault-url "$(SignKeyVaultUrl)"
      displayName: Sign packages
    
    # Publish the signed packages
    - publish: $(Pipeline.Workspace)/BuildPackages
      displayName: Publish Signed Packages
      artifact: SignedPackages