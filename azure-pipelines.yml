trigger:
- main
- rel/*

pr:
- main
- rel/*

variables: 
  BuildConfiguration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: windows-latest

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 5.x'
      inputs:
        version: 5.x

    - task: UseDotNet@2
      displayName: 'Use .NET Core Runtime 3.x'
      inputs:
        version: 3.x
        packageType: runtime 

    - task: DotNetCoreCLI@2  
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . nbgv
      displayName: Install NBGV tool

    - script: nbgv cloud
      displayName: Set Version

    - task: DotNetCoreCLI@2
      inputs:
        command: build
        projects: .\src\Humanizer.sln
        arguments: -c $(BuildConfiguration)
      displayName: Build  

    - task: NuGetToolInstaller@1  

    - pwsh: |
        mkdir $(Build.ArtifactStagingDirectory)\Packages
        $version = .\nbgv get-version -f json | ConvertFrom-Json
        $nuspecs = gci .\NuSpecs\*.nuspec 
        foreach ($item in $nuspecs) {
          nuget pack $($item.FullName) `
                    -outputdirectory $(Build.ArtifactStagingDirectory)\Packages `
                    -basepath $(System.DefaultWorkingDirectory)\src\ `
                    -NoPackageAnalysis `
                    -Properties "version=$($version.NuGetPackageVersion);RepositoryType=git;RepositoryCommit=$($version.GitCommitId);RepositoryUrl=https://github.com/Humanizr/Humanizer" 
        }
      displayName: Create packages
      
    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: .\src\Humanizer.Tests\Humanizer.Tests.csproj
        arguments: -c $(BuildConfiguration) --collect:"XPlat code coverage" -s $(System.DefaultWorkingDirectory)/src/CodeCoverage.runsettings -- RunConfiguration.DisableAppDomain=true
      displayName: Run Tests

    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . dotnet-reportgenerator-globaltool
      displayName: Install ReportGenerator tool

    - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
      displayName: Create reports

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml
      
    - publish: $(Build.ArtifactStagingDirectory)\Packages
      displayName: Publish build packages
      artifact: BuildPackages

    - publish: SignClient.json
      displayName: Publish signing config
      artifact: config

- stage: CodeSign
  condition: and(succeeded('Build'), not(eq(variables['build.reason'], 'PullRequest')))
  jobs:
  - deployment: CodeSign
    displayName: Code Signing
    pool:
      vmImage: windows-latest    
    environment: Code Sign
    variables:
    - group: SignClient Credentials
    strategy:
      runOnce:
        deploy:
          steps: 
          - task: DotNetCoreCLI@2
            inputs:
              command: custom
              custom: tool
              arguments: install --tool-path . SignClient
            displayName: Install SignTool tool

          - pwsh: |
              .\SignClient "Sign" `
              --baseDirectory "$(Pipeline.Workspace)\BuildPackages" `
              --input "**/*.nupkg" `
              --config "$(Pipeline.Workspace)\config\SignClient.json" `
              --user "$(SignClientUser)" `
              --secret "$(SignClientSecret)" `
              --name "Humanizer" `
              --description "Humanizer" `
              --descriptionUrl "https://github.com/Humanizr/Humanizer"
            displayName: Sign packages
              
          - publish: $(Pipeline.Workspace)/BuildPackages
            displayName: Publish Signed Packages
            artifact: SignedPackages